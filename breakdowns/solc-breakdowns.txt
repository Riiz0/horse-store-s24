//0x6080604052  348015600e575f80fd5b5060a58061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106030575f3560e01c8063cdfead2e146034578063e026c017146045575b5f80fd5b6043603f3660046059565b5f55565b005b5f5460405190815260200160405180910390f35b5f602082840312156068575f80fd5b503591905056fea2646970667358221220a92949a46bfcc781440a510a5f9ef6b9ad05ed1db50a6e20b780f15425af12a964736f6c63430008140033

// 3 sections:
//  1. Contract Creation
//  2. Runtime
//  3. Metadata

// 1. Contract Creation Code
// Free Memory Pointer
PUSH1 0x80  // [0x80]
PUSH1 0x40  // [0x40, 0x80]
MSTORE      // []

// What does this chunk do?
// If someone sent value with this call revert!
// Otherwise, jump to continue execution
CALLVALUE   // [msg.value]
DUP1        // [msg.value, msg.value]
ISZERO      // [msg.value == 0, msg.value]
PUSH1 0x0e  // [0x0e, msg.value == 0, msg.value]
JUMPI       // [msg.value]
PUSH0       // [0x00, msg.value]
DUP1        // [0x00, 0x00, msg.value]
REVERT      // [msg.value]

// Jump dest if msg.value == 0
// Sticks the runtime code on-chain
JUMPDEST    // [msg.value]
POP         // []
PUSH1 0xa5  // [0xa5]
DUP1        // [0xa5, 0xa5]
PUSH2 0x001b    // [0x001b, 0xa5, 0xa5]
PUSH0       // [0x00, 0x001b, 0xa5, 0xa5]
CODECOPY    // [0xa5]       Memory:[runtime code]
PUSH0       // [0x00, 0xa5]
RETURN      // []
INVALID     // []

// 2. Runtime Code
// Entry point of all calls
// free memory pointer
PUSH1 0x80
PUSH1 0x40
MSTORE

// Checking for msg.value, and if given, reverting
CALLVALUE       // [msg.value]
DUP1            // [msg.value, msg.value]
ISZERO          // [msg.value == 0, msg.value]
PUSH1 0x0e      // [0x0e, msg.value == 0, msg.value]
JUMPI           // [msg.value]
// Jump to "continue" if msg.value == 0

PUSH0           // [0x00, msg.value]
DUP1            // [0x00, 0x00, msg.value]
REVERT          // [msg.value]

// If msg.value == 0, start here!
// continue
// This is checking to see if there is enough calldata for a function selector
JUMPDEST        // [msg.value]
POP             // []
PUSH1 0x04      // [0x04]
CALLDATASIZE    // [calldata_size, 0x04]
LT              // [calldata_size < 0x04]
PUSH1 0x30      // [0x30, calldata_size < 0x04]
JUMPI           // []
// Jump to "calldata_jump" if calldata_size is less than 0x04

// Function dispatching in solidity
PUSH0           // [0]
CALLDATALOAD    // [32bytes of calldata]
PUSH1 0xe0      // [0xe0, 32bytes of calldata]
SHR             // [calldata[0:4]] // function_selector

// Function dispatching for setNumberOfHorses
DUP1            // [function_selector, function_selector]
PUSH4 0xcdfead2e    // [0xcdfead2e, function_selector, function_selector]
EQ              // [function_selector == 0xcdfead2e, function_selector]
PUSH1 0x34      // [0x34, function_selector == 0xcdfead2e, function_selector]
JUMPI           // [function_selector]
// if function_selector == 0xcdfead2e -> set_number_of_horses

// Function dispatching for readNumberOfHorses
DUP1            // [function_selector, function_selector]
PUSH4 0xe026c017    // [0xe026c017, function_selector, function_selector]
EQ              // [function_selector == 0xe026c017, function_selector]
PUSH1 0x45      // [0x45, function_selector == 0xe026c017, function_selector]
JUMPI           // [function_selector]
// if function_selector == 0xe026c017 -> read_number_of_horses

// calldata_jump
// Revert Jumpdest
JUMPDEST        // []
PUSH0           // [0x00]
DUP1            // [0x00, 0x00]
REVERT          // []

// updateHorseNumber jump dest 1
JUMPDEST        // [function_selector]
PUSH1 0x43      // [0x43, function_selector]
PUSH1 0x3f      // [0x3f, 0x43, function_selector]
CALLDATASIZE    // [calldata_size, 0x3f, 0x43, function_selector]  
PUSH1 0x04      // [0x04, calldata_size, 0x3f, 0x43, function_selector]
PUSH1 0x59      // [0x59, 0x04, calldata_size, 0x3f, 0x43, function_selector]
JUMP            // [0x04, calldata_size, 0x3f, 0x43, function_selector]

JUMPDEST        // []
PUSH0
SSTORE
JUMP
JUMPDEST
STOP
JUMPDEST
PUSH0
SLOAD
PUSH1 0x40
MLOAD
SWAP1
DUP2
MSTORE
PUSH1 0x20
ADD
PUSH1 0x40
MLOAD
DUP1
SWAP2
SUB
SWAP1
RETURN

// updateHorseNumber jump dest 2
JUMPDEST
PUSH0
PUSH1 0x20
DUP3
DUP5
SUB
SLT
ISZERO
PUSH1 0x68
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
CALLDATALOAD
SWAP2
SWAP1
POP
JUMP
INVALID
LOG2
PUSH5 0x6970667358
INVALID
SLT
KECCAK256
INVALID
INVALID
BLOBHASH
LOG4
PUSH12 0xfcc781440a510a5f9ef6b9ad
SDIV
INVALID
SAR
INVALID
EXP
PUSH15 0x20b780f15425af12a964736f6c6343
STOP
ADDMOD
EQ
STOP
CALLER